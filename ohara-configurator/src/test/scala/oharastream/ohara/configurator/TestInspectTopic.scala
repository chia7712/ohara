/*
 * Copyright 2019 is-land
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package oharastream.ohara.configurator

import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.{CountDownLatch, TimeUnit}

import oharastream.ohara.client.configurator.{BrokerApi, ConnectorApi, InspectApi, TopicApi, WorkerApi}
import oharastream.ohara.common.data.{Cell, Row, Serializer}
import oharastream.ohara.common.util.{CommonUtils, Releasable}
import oharastream.ohara.kafka.Producer
import oharastream.ohara.shabondi.common.JsonSupport
import oharastream.ohara.testing.WithBrokerWorker
import org.junit.jupiter.api.{AfterEach, Test}
import org.scalatest.matchers.should.Matchers._
import spray.json._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.duration.Duration
import scala.concurrent.{Await, Future}

class TestInspectTopic extends WithBrokerWorker {
  private[this] val configurator =
    Configurator.builder.fake(testUtil().brokersConnProps(), testUtil().workersConnProps()).build()

  private[this] val brokerClusterInfo = result(
    BrokerApi.access.hostname(configurator.hostname).port(configurator.port).list()
  ).head

  private[this] val workerClusterInfo = result(
    WorkerApi.access.hostname(configurator.hostname).port(configurator.port).list()
  ).head

  private[this] def topicApi     = TopicApi.access.hostname(configurator.hostname).port(configurator.port)
  private[this] def connectorApi = ConnectorApi.access.hostname(configurator.hostname).port(configurator.port)
  private[this] def inspectApi   = InspectApi.access.hostname(configurator.hostname).port(configurator.port)

  private[this] def result[T](f: Future[T]): T = Await.result(f, Duration(20, TimeUnit.SECONDS))

  @Test
  def goodCase(): Unit = {
    val topicInfo = result(topicApi.request.brokerClusterKey(brokerClusterInfo.key).create())
    result(topicApi.start(topicInfo.key))

    val rowCount = 10
    val producer =
      Producer.builder().connectionProps(brokerClusterInfo.connectionProps).keySerializer(Serializer.ROW).build()

    val rows = try {
      (0 until rowCount).map { _ =>
        val row = Row.of(Cell.of(CommonUtils.randomString(5), CommonUtils.randomString(5)))
        producer
          .sender()
          .topicKey(topicInfo.key)
          .key(row)
          .send()
          .get()
        row
      }
    } finally Releasable.close(producer)

    val messages = result(inspectApi.topicRequest.key(topicInfo.key).query()).messages
    messages should not be Seq.empty
    messages.foreach { message =>
      // the data is not generated by connector so it has no source key.
      message.sourceKey shouldBe None
      message.value should not be None
      message.error shouldBe None
    }

    def checkRow(json: JsValue, row: Row): Unit =
      JsonSupport.toRow(json.asJsObject) shouldBe row

    def check(count: Int): Unit = {
      val messages = result(inspectApi.topicRequest.key(topicInfo.key).limit(count).query()).messages
      messages.size shouldBe count
      // check the first row for all cases
      checkRow(messages.head.value.get, rows.last)
      checkRow(messages.last.value.get, rows(rows.size - count))
    }
    check(1)
    check(5)
    check(rowCount)
  }

  @Test
  def badCase(): Unit = {
    val topicInfo = result(topicApi.request.brokerClusterKey(brokerClusterInfo.key).create())
    result(topicApi.start(topicInfo.key))

    val closed = new AtomicBoolean(false)

    val latch = new CountDownLatch(1)
    Future {
      val producer =
        Producer.builder().connectionProps(brokerClusterInfo.connectionProps).keySerializer(Serializer.STRING).build()
      try while (!closed.get()) {
        producer.sender().topicKey(topicInfo.key).key(CommonUtils.randomString(5)).send().get()
        TimeUnit.MILLISECONDS.sleep(300)
      } finally {
        Releasable.close(producer)
        latch.countDown()
      }
    }

    try {
      val messages = result(inspectApi.topicRequest.key(topicInfo.key).query()).messages
      messages.size should be > 0
      messages.foreach { message =>
        message.value shouldBe None
        message.error should not be None
      }
    } finally {
      closed.set(true)
      latch.await()
    }
  }

  @Test
  def testDataFromPerfSource(): Unit = {
    val topicInfo = result(topicApi.request.brokerClusterKey(brokerClusterInfo.key).create())
    result(topicApi.start(topicInfo.key))

    val connectorInfo = result(
      connectorApi.request
        .workerClusterKey(workerClusterInfo.key)
        .className("oharastream.ohara.connector.perf.PerfSource")
        .topicKey(topicInfo.key)
        .create()
    )
    result(connectorApi.start(connectorInfo.key))

    // wait the connector
    TimeUnit.SECONDS.sleep(3)
    val messages = result(inspectApi.topicRequest.key(topicInfo.key).query()).messages
    messages should not be Seq.empty
    messages.foreach { message =>
      // the data is not generated by connector so it has no source key.
      message.sourceKey should not be None
      message.value should not be None
      message.error shouldBe None
    }
  }

  @Test
  def dataShouldBeInDescendingOrder(): Unit = {
    val topicInfo = result(topicApi.request.brokerClusterKey(brokerClusterInfo.key).create())
    result(topicApi.start(topicInfo.key))

    val producer =
      Producer.builder().connectionProps(brokerClusterInfo.connectionProps).keySerializer(Serializer.ROW).build()

    try {
      producer
        .sender()
        .topicKey(topicInfo.key)
        .key(Row.of(Cell.of("k0", "v0")))
        .send()
        .get()
      producer
        .sender()
        .topicKey(topicInfo.key)
        .key(Row.of(Cell.of("k1", "v1")))
        .send()
        .get()
    } finally Releasable.close(producer)

    val messages = result(inspectApi.topicRequest.key(topicInfo.key).query()).messages
    messages.size shouldBe 2
    messages.head.value.get shouldBe
      """
        | {
        |   "k1": "v1",
        |   "tags": []
        | }
        |""".stripMargin.parseJson
  }

  @AfterEach
  def tearDown(): Unit = Releasable.close(configurator)
}
