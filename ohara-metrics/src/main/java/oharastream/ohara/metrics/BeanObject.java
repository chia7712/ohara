/*
 * Copyright 2019 is-land
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package oharastream.ohara.metrics;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import javax.management.ObjectName;
import oharastream.ohara.common.util.CommonUtils;

/**
 * this is a general object storing the java bean object. It consists of "domain", "properties" and
 * "attributes". the domain and properties are a part of {@link ObjectName} the attributes are the
 * collection of value from a bean object. For example, An attributes generated by a bean object
 * having two methods - 1) getValue and 2) getKey - has two key - Key and Value.
 */
public class BeanObject {

  static Builder builder() {
    return new Builder();
  }

  private final String domainName;
  private final Map<String, String> properties;
  private final Map<String, Object> attributes;
  private final long queryTime;

  private BeanObject(
      String domainName,
      Map<String, String> properties,
      Map<String, Object> attributes,
      long queryTime) {
    this.domainName = CommonUtils.requireNonEmpty(domainName);
    this.properties = new HashMap<>(CommonUtils.requireNonEmpty(properties));
    this.attributes = new HashMap<>(CommonUtils.requireNonEmpty(attributes));
    this.properties.forEach(
        (k, v) -> {
          CommonUtils.requireNonEmpty(k);
          CommonUtils.requireNonEmpty(v);
        });
    this.attributes.forEach(
        (k, v) -> {
          CommonUtils.requireNonEmpty(k);
          Objects.requireNonNull(v);
        });
    this.queryTime = CommonUtils.requirePositiveLong(queryTime);
  }

  public String domainName() {
    return domainName;
  }

  public Map<String, String> properties() {
    return Collections.unmodifiableMap(properties);
  }

  public Map<String, Object> attributes() {
    return Collections.unmodifiableMap(attributes);
  }

  public long queryTime() {
    return queryTime;
  }

  static class Builder implements oharastream.ohara.common.pattern.Builder<BeanObject> {
    private String domainName;
    private Map<String, String> properties;
    private Map<String, Object> attributes;
    private long queryTime = -1;

    private Builder() {}

    public Builder domainName(String domainName) {
      this.domainName = CommonUtils.requireNonEmpty(domainName);
      return this;
    }

    public Builder properties(Map<String, String> properties) {
      properties.forEach(
          (k, v) -> {
            CommonUtils.requireNonEmpty(k);
            CommonUtils.requireNonEmpty(v);
          });
      this.properties = CommonUtils.requireNonEmpty(properties);
      return this;
    }

    public Builder attributes(Map<String, Object> attributes) {
      attributes.forEach(
          (k, v) -> {
            CommonUtils.requireNonEmpty(k);
            Objects.requireNonNull(v);
          });
      this.attributes = CommonUtils.requireNonEmpty(attributes);
      return this;
    }

    public Builder queryTime(long queryTime) {
      this.queryTime = queryTime;
      return this;
    }

    @Override
    public BeanObject build() {
      // in BeanObject constructor we do check for arguments.
      return new BeanObject(domainName, properties, attributes, queryTime);
    }
  }
}
