import java.util.stream.Collectors

/*
 * Copyright 2019 is-land
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: "$rootDir/gradle/dependencies.gradle"
apply plugin: 'java-library-distribution'

dependencies {
  implementation project(':ohara-common')
  implementation(libs.sshd) {
    exclude group: 'org.apache.sshd', module: 'sshd-mina'
    exclude group: 'org.apache.sshd', module: 'sshd-netty'
    exclude group: 'org.slf4j', module: 'slf4j-jdk14'
  }
  implementation libs.zookeeper
  implementation libs.kafkaCore
  implementation libs.kafkaConnectJson
  implementation libs.kafkaConnectRuntime
  implementation libs.mysql
  implementation libs.embeddedsql
  implementation libs.ftpServer
  implementation libs.slf4jApi
  implementation libs.slf4jLog4j

  /**
   * Jar conflict between Hadoop & Kafka:
   *    * Jersey: Hadoop use jersey 1.x, Kafka use jersey 2.x
   *        * Solve running Kafka Connect mini cluster failed. OHARA-103
   *    * Jetty: Hadoop use org.mortbay.jetty 6.1.x, Kafka use use newer version(org.eclipse.jetty)
   *        * Exclude older release.
   *    * Zookeeper: Hadoop use Zookeeper 3.4.6, Kafka use newer version
   *        * Exclude older release.
   */
  implementation(libs.hadoopCommon) {
    exclude group: 'com.sun.jersey', module: 'jersey-core'
    exclude group: 'com.sun.jersey', module: 'jersey-json'
    exclude group: 'com.sun.jersey', module: 'jersey-servlet'
    exclude group: 'com.sun.jersey', module: 'jersey-server'
    exclude group: 'org.mortbay.jetty', module: 'jetty'
    exclude group: 'org.mortbay.jetty', module: 'jetty-util'
    exclude group: 'org.apache.zookeeper', module: 'zookeeper'
  }
  implementation(libs.hadoopHDFS) {
    exclude group: 'com.sun.jersey', module: 'jersey-core'
    exclude group: 'com.sun.jersey', module: 'jersey-json'
    exclude group: 'com.sun.jersey', module: 'jersey-servlet'
    exclude group: 'com.sun.jersey', module: 'jersey-server'
    exclude group: 'org.mortbay.jetty', module: 'jetty'
    exclude group: 'org.mortbay.jetty', module: 'jetty-util'
  }
  testImplementation project(':ohara-common').sourceSets.test.output
  testImplementation libs.scalatest
  testImplementation libs.mockitoAll
  testImplementation libs.junitApi
  testRuntimeOnly libs.junitEngine
}

distributions {
  main {
//    baseName = "ohara"
    contents {
      into("conf") {
        // ref to root module
        from { "$projectDir/../conf" }
      }
      into("bin") {
        // ref to root module
        from { "$projectDir/../bin" }
        fileMode 0755
      }
      into("lib") {
        from { "$projectDir/build/libs/ohara-testing-util-${version}.jar" }
      }
    }
  }
}

/**
 * run ftp server
 */
task runFtp(type: JavaExec, dependsOn: 'classes') {
  classpath = sourceSets.main.runtimeClasspath
  main = "oharastream.ohara.testing.service.FtpServer"

  def keywords = [
    "homeFolder",
    "hostname",
    "user",
    "password",
    "controlPort",
    "dataPorts",
    "ttl"
  ]
  args = keywords.stream()
    .filter {
      word -> project.hasProperty(word)
    }
    .flatMap {
      word -> Arrays.asList("--$word", project.getProperty(word)).stream()
    }
    .collect(Collectors.toUnmodifiableList())
}