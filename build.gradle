/*
 * Copyright 2019 is-land
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
    id "com.diffplug.gradle.spotless" version "3.26.0" apply false
    id "org.gradle.test-retry" version "1.2.0" apply false
    id "com.jfrog.bintray" version "1.8.4" apply false
}

def needHeaders() {
    return [
            fileTree(dir: ".").include("**/*.java"),
            fileTree(dir: ".").include("**/*.scala"),
            fileTree(dir: ".").include("**/*.sh"),
            fileTree(dir: ".").include("**/*.properties"),
            fileTree(dir: ".").include("**/*.js"),
            fileTree(dir: ".").include("**/*.ts"),
            fileTree(dir: ".").include("**/*.tsx"),
            fileTree(dir: ".").include("**/*.dockerfile"),
            fileTree(dir: ".").include("**/*.conf"),
            fileTree(dir: ".").include("**/*.gradle"),
            fileTree(dir: ".").include("**/*.yaml"),
            fileTree(dir: ".").include("**/*.yml"),
            fileTree(dir: ".").include("**/*.rst"),
            fileTree(dir: ".").include("**/*.py")
    ]
}

static def isJavaModule(String moduleName) {
    return moduleName == 'ohara-common' ||
            moduleName == 'ohara-metrics' ||
            moduleName == 'ohara-kafka' ||
            moduleName == 'ohara-testing-util' ||
            moduleName == 'ohara-stream'
}

tasks.register("build") {
    group = 'Build'
    description = 'Assembles and tests this project.'
}

subprojects {
    // -------------------------------------------------[repositories]-------------------------------------------------//
    repositories {
        mavenCentral()
        // enable to use local repo as we supports to build ohara image with up-to-date kafka source code.
        // Noted that mavenLocal must be after mavenCentral to avoid "not find" error when local repo does not have
        // specify jars.
        mavenLocal()
    }

    // -------------------------------------------------[java/scala plugin]-------------------------------------------------//
    if (isJavaModule(it.name)) {
        apply plugin: 'java'
        java {
            sourceCompatibility = JavaVersion.VERSION_11
            targetCompatibility = JavaVersion.VERSION_11
        }
    } else {
        apply plugin: 'scala'
        scala {
            // https://github.com/sbt/zinc/releases
            zincVersion = "1.3.5"
        }
    }

    // -------------------------------------------------[jUnit configs]-------------------------------------------------//
    apply plugin: 'org.gradle.test-retry'
    int numberOfForks = it.name == 'ohara-it' ? 1 :
            project.hasProperty('maxParallelForks') ? maxParallelForks.toInteger() :
                    Math.max((int) (Runtime.runtime.availableProcessors() / 2), 1)

    // the retries are disabled by default and it is up to jenkins.
    int numberOfRetries = project.hasProperty('maxTestRetries') ? maxTestRetries.toInteger() : 0
    int numberOfFailures = project.hasProperty('maxTestFailures') ? maxTestFailures.toInteger() : 1

    def integrationTags = [
            collieIT   : "integration-test-collie",
            connectorIT: "integration-test-connector",
            clientIT   : "integration-test-client",
            streamIT   : "integration-test-stream",
            performance: "performance"
    ]

    tasks.withType(Test) {
        if (project.name == 'ohara-it') {
            // generate the testing-purpose jars for IT
            dependsOn(':ohara-it:sourceJar')
            dependsOn(':ohara-it:sinkJar')
            dependsOn(':ohara-it:streamJar')

            project.getProperties().forEach {
                k, v ->
                    if (k.startsWith("ohara.it")) {
                        environment k, v
                    }
            }
        }

        useJUnitPlatform()

        retry {
            maxRetries = numberOfRetries
            maxFailures = numberOfFailures
        }
        maxParallelForks = numberOfForks
        // make isolation for tests. It may be expensive but stability is first choice.
        forkEvery = 1
        minHeapSize = "256m"
        maxHeapSize = "4096m"
        testLogging {
            events "PASSED", "STARTED", "FAILED", "SKIPPED"
            exceptionFormat = 'full'
        }
    }

    // generate custom test tasks
    if (it.name == 'ohara-it') {
        integrationTags.each {
            entry ->
                String taskName = entry.key
                tasks.create(name: taskName, type: Test) {
                    useJUnitPlatform {
                        includeTags entry.value
                    }
                }
        }

        task otherIT(type: Test) {
            useJUnitPlatform {
                excludeTags = integrationTags.values().toSet()
            }
        }

        test {
            useJUnitPlatform {
                // exclude all tests depending on specify env so user can run ```gradle clean test``` to execute all normal tests
                // If users want to run true IT, they have to call specify test task with required env settings. That is what our
                // QA (jenkins) is doing.
                excludeTags = integrationTags.values().toSet()
            }
        }
    }

    // -------------------------------------------------[docs/tests/sources jar]-------------------------------------------------//

    task testJar(type: Jar, dependsOn: testClasses) {
        from sourceSets.test.output
        classifier 'tests'
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.output
        classifier 'sources'
    }

    String moduleName = it.name

    task docJar(type: Jar) {
        if (isJavaModule(moduleName)) {
            from javadoc
            classifier 'javadoc'
        } else {
            from scaladoc
            classifier 'scaladoc'
        }
    }

    configurations {
        // pass the test configurations to the module depending on the test code of other modules
        testRuntime.extendsFrom archives
    }

    artifacts {
        archives testJar
    }

    // -------------------------------------------------[java compiler configs]-------------------------------------------------//
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs += ["-Xlint:all", "-Werror"]
    }

    // -------------------------------------------------[scala compiler configs]-------------------------------------------------//
    tasks.withType(ScalaCompile) {
        scalaCompileOptions.additionalParameters = [
                // Scala Compiler Options
                // https://github.com/scala/scala/blob/2.12.x/src/compiler/scala/tools/nsc/settings/StandardScalaSettings.scala
                // https://github.com/scala/scala/blob/2.12.x/src/compiler/scala/tools/nsc/settings/ScalaSettings.scala
                "-deprecation",
                "-unchecked",
                "-encoding", "utf8",
                "-Xlog-reflective-calls",
                "-feature",
                "-language:implicitConversions",
                "-language:existentials",
                "-target:11",
                "-explaintypes",
                "-feature",
                "-unchecked",
                // -Xlint enables all -Xlint:xxx checks.
                // see https://github.com/scala/scala/blob/2.12.x/src/compiler/scala/tools/nsc/settings/Warnings.scala#L60
                "-Xlint",
                "-Ywarn-dead-code",
                "-Ywarn-unused:imports",
                "-Ywarn-unused:implicits",
                "-Ywarn-unused:imports",
                "-Ywarn-unused:locals",
                "-Ywarn-unused:params",
                "-Ywarn-unused:patvars",
                "-Ywarn-unused:privates",
                "-Werror"
        ]

        // -------------------------------------------------[gradle configs]-------------------------------------------------//
        configure(scalaCompileOptions.forkOptions) {
            // the memory limit of scala compilation is higher than gradle daemon because gradle 6.x uses newest zinc which
            // requires more memory in making incremental compilation.
            // TODO: how to set suitable memory to scala compilation? by chia
            memoryMaximumSize = '2g'
            jvmArgs = ['-Xss2m', '-XX:MaxMetaspaceSize=1024m', '-XX:+HeapDumpOnOutOfMemoryError', '-Dfile.encoding=UTF-8']
        }
    }
}


